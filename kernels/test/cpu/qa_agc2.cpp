#include <gnuradio/kernels/cpu/agc2_cc.hpp>
#include <gnuradio/kernels/cpu/agc2_ff.hpp>
#include <gtest/gtest.h>
#include <iostream>
#include <thread>

using namespace gr;
namespace analog = gr::kernels::analog::cpu;

TEST(AnalogKernel, agc2_float_identity_test)
{
    auto agc_kernel = analog::agc2_ff(.001f, .1f, 1.0f, 1.0f, 65536.0f);
    float input[100];
    float output[100];
    float expected_output[100];

    for (unsigned int idx = 0; idx < 100; idx++) {
        input[idx] = 1.0f;
        output[idx] = 1.0f;
        expected_output[idx] = 1.0f;
    }

    agc_kernel(input, output, 100);

    for (unsigned int idx = 0; idx < 100; idx++)
        EXPECT_NEAR(output[idx], expected_output[idx], .0001f);
}

TEST(AnalogKernel, agc2_float_ramp_test)
{
    auto agc_kernel = analog::agc2_ff(.001f, .01f, 1.0f, 1.0f, 65536.0f);
    float input[100];
    float output[100];
    float expected_output[100] = {
        0.5,      0.5025,   0.504987, 0.507463, 0.509925, 0.512376, 0.514814, 0.51724,
        0.519653, 0.522055, 0.524445, 0.526823, 0.529189, 0.531543, 0.533885, 0.536215,
        0.538534, 0.540842, 0.543138, 0.545422, 0.547695, 0.549956, 0.552206, 0.554445,
        0.556673, 0.55889,  0.561095, 0.56329,  0.565473, 0.567646, 0.569808, 0.571959,
        0.574099, 0.576229, 0.578347, 0.580456, 0.582553, 0.584641, 0.586717, 0.588784,
        0.59084,  0.592886, 0.594921, 0.596947, 0.598962, 0.600967, 0.602962, 0.604948,
        0.606923, 0.608888, 0.610844, 0.61279,  0.614726, 0.616652, 0.618569, 0.620476,
        0.622374, 0.624262, 0.62614,  0.62801,  0.62987,  0.63172,  0.633562, 0.635394,
        0.637217, 0.639031, 0.640836, 0.642632, 0.644418, 0.646196, 0.647965, 0.649725,
        0.651477, 0.653219, 0.654953, 0.656679, 0.658395, 0.660103, 0.661803, 0.663494,
        0.665176, 0.66685,  0.668516, 0.670174, 0.671823, 0.673464, 0.675096, 0.676721,
        0.678337, 0.679946, 0.681546, 0.683138, 0.684722, 0.686299, 0.687867, 0.689428,
        0.690981, 0.692526, 0.694063, 0.695593
    };

    for (unsigned int idx = 0; idx < 100; idx++)
        input[idx] = .5f;

    agc_kernel(input, output, 100);

    // std::cout << "{";
    // for (unsigned int idx = 0; idx < 100; idx++) {
    //     std::cout << output[idx] << ", ";
    //     if ((idx + 1) % 10 == 0) {
    //         std::cout << std::endl;
    //     }
    // }
    // std::cout << "};" << std::endl;

    for (unsigned int idx = 0; idx < 100; idx++)
        EXPECT_NEAR(output[idx], expected_output[idx], .0001f);
}

TEST(AnalogKernel, agc2_complex_identity_test)
{
    auto agc_kernel = analog::agc2_cc(.001f, .1f, 1.0f, 1.0f, 65536.0f);
    std::complex<float> input[100];
    std::complex<float> output[100];
    std::complex<float> expected_output[100];

    for (unsigned int idx = 0; idx < 100; idx++) {
        input[idx] = std::complex<float>(1.0f, 0.0f);
        output[idx] = std::complex<float>(1.0f, 0.0f);
        expected_output[idx] = std::complex<float>(1.0f, 0.0f);
    }

    agc_kernel(input, output, 100);

    for (unsigned int idx = 0; idx < 100; idx++) {
        EXPECT_NEAR(output[idx].real(), expected_output[idx].real(), .0001f);
        EXPECT_NEAR(output[idx].imag(), expected_output[idx].imag(), .0001f);
    }
}

TEST(AnalogKernel, agc2_complex_ramp_test)
{
    auto agc_kernel = analog::agc2_cc(.001f, .01f, 1.0f, 1.0f, 65536.0f);
    std::complex<float> input[100];
    std::complex<float> output[100];
    std::complex<float> expected_output[100] = {
        { 0.5, 0.5 },           { 0.501464, 0.501464 }, { 0.502919, 0.502919 },
        { 0.504362, 0.504362 }, { 0.505796, 0.505796 }, { 0.507219, 0.507219 },
        { 0.508633, 0.508633 }, { 0.510036, 0.510036 }, { 0.51143, 0.51143 },
        { 0.512814, 0.512814 }, { 0.514187, 0.514187 }, { 0.515552, 0.515552 },
        { 0.516906, 0.516906 }, { 0.518251, 0.518251 }, { 0.519586, 0.519586 },
        { 0.520912, 0.520912 }, { 0.522229, 0.522229 }, { 0.523536, 0.523536 },
        { 0.524834, 0.524834 }, { 0.526123, 0.526123 }, { 0.527403, 0.527403 },
        { 0.528674, 0.528674 }, { 0.529935, 0.529935 }, { 0.531188, 0.531188 },
        { 0.532432, 0.532432 }, { 0.533667, 0.533667 }, { 0.534894, 0.534894 },
        { 0.536111, 0.536111 }, { 0.53732, 0.53732 },   { 0.538521, 0.538521 },
        { 0.539713, 0.539713 }, { 0.540897, 0.540897 }, { 0.542072, 0.542072 },
        { 0.543239, 0.543239 }, { 0.544398, 0.544398 }, { 0.545548, 0.545548 },
        { 0.546691, 0.546691 }, { 0.547825, 0.547825 }, { 0.548951, 0.548951 },
        { 0.55007, 0.55007 },   { 0.55118, 0.55118 },   { 0.552283, 0.552283 },
        { 0.553377, 0.553377 }, { 0.554464, 0.554464 }, { 0.555544, 0.555544 },
        { 0.556615, 0.556615 }, { 0.55768, 0.55768 },   { 0.558736, 0.558736 },
        { 0.559785, 0.559785 }, { 0.560827, 0.560827 }, { 0.561861, 0.561861 },
        { 0.562888, 0.562888 }, { 0.563908, 0.563908 }, { 0.564921, 0.564921 },
        { 0.565926, 0.565926 }, { 0.566925, 0.566925 }, { 0.567916, 0.567916 },
        { 0.5689, 0.5689 },     { 0.569877, 0.569877 }, { 0.570848, 0.570848 },
        { 0.571811, 0.571811 }, { 0.572768, 0.572768 }, { 0.573718, 0.573718 },
        { 0.574661, 0.574661 }, { 0.575597, 0.575597 }, { 0.576527, 0.576527 },
        { 0.577451, 0.577451 }, { 0.578367, 0.578367 }, { 0.579278, 0.579278 },
        { 0.580182, 0.580182 }, { 0.581079, 0.581079 }, { 0.58197, 0.58197 },
        { 0.582855, 0.582855 }, { 0.583734, 0.583734 }, { 0.584606, 0.584606 },
        { 0.585472, 0.585472 }, { 0.586332, 0.586332 }, { 0.587186, 0.587186 },
        { 0.588034, 0.588034 }, { 0.588876, 0.588876 }, { 0.589712, 0.589712 },
        { 0.590542, 0.590542 }, { 0.591367, 0.591367 }, { 0.592185, 0.592185 },
        { 0.592998, 0.592998 }, { 0.593805, 0.593805 }, { 0.594606, 0.594606 },
        { 0.595401, 0.595401 }, { 0.596191, 0.596191 }, { 0.596975, 0.596975 },
        { 0.597754, 0.597754 }, { 0.598527, 0.598527 }, { 0.599295, 0.599295 },
        { 0.600057, 0.600057 }, { 0.600814, 0.600814 }, { 0.601566, 0.601566 },
        { 0.602312, 0.602312 }, { 0.603053, 0.603053 }, { 0.603789, 0.603789 },
        { 0.60452, 0.60452 }
    };

    for (unsigned int idx = 0; idx < 100; idx++)
        input[idx] = std::complex<float>(.5f, .5f);

    agc_kernel(input, output, 100);

    for (unsigned int idx = 0; idx < 100; idx++) {
        EXPECT_NEAR(output[idx].real(), expected_output[idx].real(), .0001f);
        EXPECT_NEAR(output[idx].imag(), expected_output[idx].imag(), .0001f);
    }
}
